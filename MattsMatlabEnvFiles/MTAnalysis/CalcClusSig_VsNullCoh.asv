function err=CalcClusSig_VsNullCoh(OTStat,MaxClusStat,nShuffs,wintimes,f,pval)  
%function err=CalcClusSig_VsNullCoh(OTStat,MaxClusStat,nShuffs,wintimes,f,pval)     
%
%Note we don't need NClusCutOff b/c that's only used for calcing clus sums     

%first find all PVals ... no way to do this without looping through...
%OTStat needs to have Freqs down dim 1 and time wins down dim 2   
err.NullTestStatDist=MaxClusStat;
err.SigThresh= MaxClusStat( round((1-pval)*nShuffs),1 );
for iw=1:length(wintimes)
    for iF=1:length(f)
        err.PVals(iw,iF)=sum( MaxClusStat>=OTStat(iw,iF) )/nShuffs;        
    end
end
        
[err.SigClusAssign,err.NSigClus] = bwlabeln(OTStat>=err.SigThresh,4);

%get TFCens of all Clusters
err.AllTFCens=repmat(0,err.NSigClus,2);
[Cli,Clj,Cln] = find(err.SigClusAssign);
for isc=1:err.NSigClus
    tmpInds=find( Cln==isc );   %all the clusters here are significant
    
    %for some reason, here the dimensions DON'T seem to get screw
    %if length(wintimes)==1      %.... the dimensions get screwed up if there's only one time window
    %    err.Clus(isc).AllTFVals=[wintimes( Cli(tmpInds) )' f( Clj(tmpInds) )']; %Cli will be TIME inds, and Clj will be FREQ Inds
    %else
        err.Clus(isc).AllTFVals=[wintimes( Cli(tmpInds) )' f( Clj(tmpInds) )']; %Cli will be TIME inds, and Clj will be FREQ Inds
    %end
    err.Clus(isc).TFCen=mean(err.Clus(isc).AllTFVals,1);
    err.AllTFCens(isc,:)=err.Clus(isc).TFCen;
end
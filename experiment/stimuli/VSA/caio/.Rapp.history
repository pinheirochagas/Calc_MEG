### PACKAGES ####
install.packages ('scatterplot3d'); install.packages ('rgl'); install.packages ('dataframes2xls'); install.packages ('xtable'); install.packages ('R2HTML'); install.packages ('doBy'); install.packages ('gdata'); install.packages('beeswarm'); install.packages('MASS'); install.packages('segmented'); install.packages('car');install.packages('compute.es'); install.packages('effects'); install.packages('ggplot2'); install.packages('multcomp'); install.packages('pastecs'); install.packages('QuantPsyc');install.packages('reshape');#
install.packages('GGally'); install.packages('extrafont'); install.packages('XLConnect'); install.packages('epicalc'); install.packages('sandwich'); install.packages('multilevel')
install.packages ('scatterplot3d')
library(scatterplot3d)
install.packages('multilevel')
files <- dir(path, pattern = '\\.csv', full.names = TRUE)
files
subjname = 'test'#
#
path = sprintf("/Users/pinheirochagas/Pedro/NeuroSpin/Experiments/Calc_MEG/experiment/results/Calc/%s", subjname)
setwd(path)
files <- dir(path, pattern = '\\.csv', full.names = TRUE)
files
tables <- lapply(files, read.csv)
tables
do.call(rbind, tables)
data <- load_data(path)
load_data <- function(path) { #
  files <- dir(path, pattern = '\\.csv', full.names = TRUE)#
  tables <- lapply(files, read.csv)#
  do.call(rbind, tables)#
}
data <- load_data(path)
which(data)
class(data)
head(data)
simtdir = sprintf("/Users/pinheirochagas/Pedro/NeuroSpin/Experiments/Calc_MEG/experiment/stim/Calc/%s", subjname)#
resultsdir = sprintf("/Users/pinheirochagas/Pedro/NeuroSpin/Experiments/Calc_MEG/experiment/results/Calc/%s", subjname)
# Define the subject#
subjname = 'test'#
#
# Define the paths#
simtdir = sprintf("/Users/pinheirochagas/Pedro/NeuroSpin/Experiments/Calc_MEG/experiment/stim/Calc/%s", subjname)#
resultsdir = sprintf("/Users/pinheirochagas/Pedro/NeuroSpin/Experiments/Calc_MEG/experiment/results/Calc/%s", subjname)#
setwd(resultsdir)
runs <- load_data(simtdir)#
data <- load_data(resultdir)
runs <- load_data(simtdir)#
data <- load_data(resultsdir)
runs
simtdir = sprintf("/Users/pinheirochagas/Pedro/NeuroSpin/Experiments/Calc_MEG/experiment/stimuli/Calc/%s", subjname)
runs <- load_data(simtdir)
files <- dir(path, pattern = '\\.csv', full.names = TRUE)
files
path = stimdir
path = stimdir
stimdir = sprintf("/Users/pinheirochagas/Pedro/NeuroSpin/Experiments/Calc_MEG/experiment/stimuli/Calc/%s", subjname)
stimdir
path = stimdir
files <- dir(path, pattern = '\\.csv', full.names = TRUE)
files
runs <- load_data(stimdir)
load_data <- function(path) { #
	files <- dir(path, pattern = '\\.csv', full.names = TRUE)#
	tables <- lapply(files, read.csv)#
	do.call(rbind, tables)#
}#
#
# Load the stim and the results#
runs <- load_data(stimdir)
files
tables <- lapply(files, read.csv)
tables
help
? read.csv
tables <- lapply(files, read.csv, header = FALSE )
tables
tables <- lapply(files, read.csv, header = TRUE )
tables
tables <- lapply(files, read.csv, header = FALSE )
runs <- load_data(stimdir)
runs
tables <- lapply(files, read.csv, header = FALSE )
tables
do.call(rbind, tables)
# Function to load all the data and put together in a single dataframe#
load_data <- function(path) { #
	files <- dir(path, pattern = '\\.csv', full.names = TRUE)#
	tables <- lapply(files, read.csv, header = FALSE )#
	do.call(rbind, tables)#
}#
#
# Load the stim and the results#
runs <- load_data(stimdir)
runs
dim(runs)
dim(data)
2150/4
2150/5
ops <- data$my_event
ops
names(data)
ops <- data$myEvent
ops
matrix(ops,ncol=5,bycol=T)
? matrix
matrix(ops,ncol=5)
matrix(ops,ncol=5, byrow=F)
matrix(ops,ncol=5, byrow=T)
matrix(data$myEvent,ncol=5, byrow=T)
runs
opsRuns <- matrix(runs[,1:5])
opsRuns
runs[,1:5]
opsRuns <- as.matrix(runs[,1:5])
opsRuns
opsData == opsRuns
opsData <- matrix(data$myEvent,ncol=5, byrow=T)#
opsRuns <- as.matrix(runs[,1:5])#
opsData == opsRuns
data
names(dat)
names(data)
dataResp <- data[data$response != 99]
dataResp <- data[data$response != 99,]
dataResp
runs
runs[,1]==runs[,5]
dataResp$responseCorr <- runs[,1]==runs[,5]
dataResp
runs
runs$responseCorr <- runs[,1]==runs[,5]
runs
runs[,3]/10
runs[,2]/10
runs[,2]/10*runs[,5]
runs$responseCorr <- runs[,1]==runs[,1]+runs[,2]/10*runs[,5]
runs$responseCorr
runs$responseCorr <- runs[,1]==runs[,1]+runs[,2]/10*runs[,5]
runs
runs[,1]+runs[,2]/10*runs[,5]
runs[,1]+(runs[,2]/10)*runs[,5]
(runs[,2]/10)*runs[,5]
runs[,1]+(runs[,2]/10)*runs[,5]
runs$answerCorr <- runs[,1]+(runs[,2]/10)*runs[,5]
runs
runs$answerCorr <- runs[,1]+(runs[,2]/10)*runs[,3]
runs
runs$answerCorr[runs$answerCorr>100,]
runs$answerCorr
runs$answerCorr[runs$answerCorr>100]
runs$answerCorr>100
runs$answerCorr[runs$answerCorr>100]
runs$answerCorr>100
runs$answerCorr[runs$answerCorr>100]
runs[runs$answerCorr[runs$answerCorr>100],1]
runs$answerCorr[runs$answerCorr>100]
runs[runs$answerCorr>100,1]
runs
runs$answerCorr[runs$answerCorr>100] = runs[runs$answerCorr>100,1]
runs
dataResp
names(runs)
runs
runs
names(runs)
runs$responseCorr <- runs[,1]==runs[,8]
runs$responseCorr
runs
runs$responseCorr <- runs[,5]==runs[,8]
runs
runs$deviant <- abs(runs[,5]-runs[,8])
runs
dataResp$deviant <- runs$deviant
dataResp$responseCorr <- runs$responseCorr
dataResp
library(reshape)#
### CLEAN WORKSPACE ####
rm(list=ls())#
#
subjname = 'ainaf'#
#
path = sprintf("/Users/pinheirochagas/Pedro/NeuroSpin/Experiments/Calc_MEG/experiment/stimuli/VSA/%s", subjname)#
dir.create(path)#
#
setwd(path)#
#
ntrials = 300#
mean_trial_dur <- ((24+32+120+12)*16.777)/1000 # mean trial duration #
(mean_trial_dur*300)/60#
#
pcinc = 0.20#
pccon = 0.80#
#
incongruent <- ntrials*pcinc#
congruent <- ntrials*pccon#
#ntrials_blocks <- ntrials/2 #
ntrials_blocks <- ntrials#
#
rml = 20 # rep of minimal list#
rfl = ntrials_blocks%/%(rml*2) # rep of full list#
rflr = ntrials_blocks%%(rml*2) # rest to be added#
#
rfllet = ntrials_blocks%/%rml # rep of full list#
rflrlet = ntrials_blocks%%rml # rest to be added#
#
# Runs 1 and 2#
#Cue <- rep(c(rep('DodgerBlue', rml), rep('Orange', rml)))#
Cue <- rep(c(rep(-6, rml), rep(6, rml)))#
#
Position <- c(rep(-6, rml*pccon), rep(6,rml*pcinc), rep(6,rml*pccon), rep(-6,rml*pcinc))#
Congruency <- c(rep(0,rml*pccon), rep(1,rml*pcinc), rep(0,rml*pccon), rep(1,rml*pcinc))#
#
Cue <- c(rep(Cue,rfl),Cue[1:rflr])#
Position <- c(rep(Position,rfl), Position[1:rflr])#
Congruency <- c(rep(Congruency,rfl), Congruency[1:rflr])#
#
Letter <- c()#
for(i in 1:rfllet){#
#Letter[[i]] <- c(rep(c('T', 'T'),8),sample(c('T', 'T', 'T', 'T')))#
 Letter[[i]] <- c(rep(c('T', 'L'),8),sample(c('T', 'T', 'L', 'L')))#
}#
Letter <- melt.list(Letter)#
#Letter <- c(as.character(Letter$value), rep(c('T', 'T'), rflrlet/2))#
 Letter <- c(as.character(Letter$value), rep(c('T', 'L'), rflrlet/2))#
#
#Delay <- c(round(runif(ntrials_blocks*.9, 24, 48)),rep(1, ntrials_blocks -ntrials_blocks*.9))#
#
Delay <- c(rep(24, ntrials/2))#
#
VSA_df <- data.frame(Cue, Letter, Position,Delay, Congruency)#
as.factor(VSA_df$Congruency)#
#
#VSA_df$cong_check <- VSA_df$Cue == VSA_df$Position#
#
VSA_shuffle <- VSA_df[sample(nrow(VSA_df)),]#
#
# Add 3 training trials for each block#
VSA_run1 <- rbind(VSA_shuffle[10:12,], VSA_shuffle[1:75,])#
VSA_run2 <- rbind(VSA_shuffle[20:22,], VSA_shuffle[76:150,])#
VSA_run3 <- rbind(VSA_shuffle[30:32,], VSA_shuffle[151:225,])#
VSA_run4 <- rbind(VSA_shuffle[40:42,], VSA_shuffle[226:300,])#
#
dim(VSA_run1)#
dim(VSA_run2)#
dim(VSA_run3)#
dim(VSA_run4)#
#
dim(VSA_shuffle[VSA_shuffle$Congruency ==0,])#
dim(VSA_shuffle[VSA_shuffle$Congruency ==1,])#
write.csv(VSA_run1, 'run1.csv',row.names = FALSE)#
write.csv(VSA_run2, 'run2.csv',row.names = FALSE)#
write.csv(VSA_run3, 'run3.csv',row.names = FALSE)#
write.csv(VSA_run4, 'run4.csv',row.names = FALSE)#
# Runs 3 and 4#
#
#Position <- c(rep(6, rml*pccon), rep(-6,rml*pcinc), rep(-6,rml*pccon), rep(6,rml*pcinc))#
#Position <- c(rep(Position,rfl), Position[1:rflr])#
#
#Delay <- c(round(runif(ntrials_blocks*.9, 24, 48)),rep(1, ntrials_blocks -ntrials_blocks*.9))#
#Delay <- c(rep(24, ntrials/2))#
#
#VSA_df <- data.frame(Cue, Letter, Position,Delay, Congruency)#
#as.factor(VSA_df$Congruency)#
#
#VSA_shuffle <- VSA_df[sample(nrow(VSA_df)),]#
#
#VSA_run3 <- VSA_shuffle[1:75,]#
#VSA_run4 <- VSA_shuffle[76:150,]#
#write.csv(VSA_run3, 'run3.csv',row.names = FALSE)#
#write.csv(VSA_run4, 'run4.csv',row.names = FALSE)#
#VSA_run1_scon <- summary(VSA_run1[VSA_run3$Congruency == 0,])#
#VSA_run2_scon <- summary(VSA_run2[VSA_run3$Congruency == 0,])#
#VSA_run3_scon <- summary(VSA_run3[VSA_run3$Congruency == 0,])#
#VSA_run4_scon <- summary(VSA_run4[VSA_run3$Congruency == 0,])#
#
#VSA_run1_sicon <- summary(VSA_run1[VSA_run3$Congruency == 1,])#
#VSA_run2_sicon <- summary(VSA_run2[VSA_run3$Congruency == 1,])#
#VSA_run3_sicon <- summary(VSA_run3[VSA_run3$Congruency == 1,])#
#VSA_run4_sicon <- summary(VSA_run4[VSA_run3$Congruency == 1,])

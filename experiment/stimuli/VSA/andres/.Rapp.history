library(reshape)#
library(ggplot2)#
library(plyr)#
### CLEAN WORKSPACE ####
rm(list=ls())#
#
subjname = 'andres'#
#
path = sprintf("/Users/pinheirochagas/Pedro/NeuroSpin/Experiments/Calc_MEG/experiment/results/VSA/%s", subjname)#
#
setwd(path)#
#
data1 <- read.csv('1_results.csv')#
data2 <- read.csv('2_results.csv')#
data3 <- read.csv('3_results.csv')#
data4 <- read.csv('4_results.csv')#
#
data <- rbind(data1, data2, data3, data4)#
#
data <- data[data$myEvent=='T'|data$myEvent=='L',]#
data$response1 <- toupper(data$response)#
#
path = sprintf("/Users/pinheirochagas/Pedro/NeuroSpin/Experiments/Calc_MEG/experiment/stimuli/VSA/%s", subjname)#
setwd(path)#
#
run1 <- read.csv('run1.csv')#
run2 <- read.csv('run2.csv')#
run3 <- read.csv('run3.csv')#
run4 <- read.csv('run4.csv')#
#
runs = rbind(run1, run2, run3, run4)#
#
data$congruency <- runs$Congruency#
#
data$delay <- runs$Delay#
#
data$congruency <- as.factor(data$congruency)#
data$position <- runs$Position#
data <- data[data$delay!=1,]#
#
datamiss <- data[data$response == 0,]#
dim(datamiss)#
#
data <- data[data$response != 0,]#
#
data$response = factor(data$response)#
data$myEvent = factor(data$myEvent)#
#
dim(data[data$response != data$myEvent,])
dim(datamiss)
dim(datamiss)
datamiss
dim(data[data$response != data$myEvent,])
data_correct <- data[data$response == data$myEvent,]
data_incorrect <- data[data$response != data$myEvent,]
dim(data_correct)
dim(data_incorrect)
### Data trimmig reaction times#
## REACTION TIMES#
# Data trimming#
# Defifing objects for the loops#
RTdata_b <- c()#
RTdata_trimmed <- c()#
# Defifing data trimming factor #
datatrimming_factor = 3#
#
#for(i in 1:dim(data)[1]){#
	RTdata <- as.matrix(data$rt)#
	#RTdata[data[[i]]$answer == 0] <- NA#
	while (!identical(RTdata_b, RTdata)) {#
		meanRT <- apply(RTdata, 2, mean, na.rm=T)#
		sdRT <- apply(RTdata, 2, sd, na.rm=T)#
		interval_high <- meanRT+datatrimming_factor*sdRT#
		interval_low <- meanRT-datatrimming_factor*sdRT#
		obj <- mapply(function(i){as.matrix(as.numeric(RTdata[,i] <= interval_high[i]), nrow=dim(RTdata)[1])}, 1:dim(RTdata)[2])#
		RTdata[obj==0] <- NA#
		RTdata_b <- RTdata#
		}#
#RTdata_trimmed[i] <- RTdata_b#
#}#
data$RTdata_b <- RTdata_b#
data <- data[!is.na(RTdata_b),]#
#
boxplot(data$rt ~ data$congruency)#
#
by(data$rt, data$congruency, mean)#
by(data$rt, data$congruency, sd)#
#
rt_congruent <- data[data$congruency ==0,5]#
rt_incongruent <- data[data$congruency ==1,5]#
#
t.test(rt_congruent, rt_incongruent)#
#
# Plot w congruent and incongruent#
mean_plot <- ddply(data, "congruency", summarise, rt = mean(rt))#
mean_plot$congruency <- c('Valid', 'Invalid')#
sd_plot <- ddply(data, "congruency", summarise, std = sd(rt))#
n_obs <- c(length(which(data$congruency=='0')),length(which(data$congruency=='1')))#
data_plot <- data.frame(cbind(mean_plot, sd_plot[,2], n_obs, sd_plot[,2]/sqrt(n_obs)))#
colnames(data_plot) <-  c('Congruency','mean','sd','n', 'se')#
#
plot_data <- ggplot(data_plot, aes(x=Congruency, y=mean,fill=Congruency, width=.5)) + geom_bar(position ='identity' , stat='identity') + geom_errorbar(aes(ymin=mean-se,ymax=mean+se),position=position_dodge(.5),width=.01) + scale_fill_manual(values=c("grey", "grey")) + labs(y = "RT") + theme_bw() + theme(legend.position="none") + scale_y_continuous(limits=c(0,700),breaks=seq(0, 800, 50)) + theme(axis.title.x = element_blank()) + theme(text = element_text(size=20))
plot_data
by(data$rt, data$congruency, mean)
plot_data
ggsave(file=sprintf("plot_data_%s.eps", subjname), plot= plot_data, width=6, height=6	 )
534.8736-483.7655
